{"version":3,"file":"Button.stories-6ef3521d.js","sources":["../../src/components/Button/Button.type.ts","../../src/components/Button/Button.styles.ts","../../src/components/Button/Button.tsx"],"sourcesContent":["import { CSSProperties, ReactNode } from 'react';\n\nexport type TButtonOn = 'light' | 'dark';\nexport type TButtonColor = 'primary' | 'default';\nexport type TButtonStyle = 'filled' | 'outlined' | 'default' | 'text' | 'applied';\nexport type TButtonSize = 'L' | 'M' | 'S';\n\nexport enum BUTTON_TYPE {\n  'lightPrimaryFill',\n  'lightDefaultFill',\n  'lightPrimaryLine',\n  'lightDefaultLine',\n  'lightText',\n  'lightPrimaryApplied',\n  'lightFillDisabled',\n  'lightLineDisabled',\n  'lightTextDisabled',\n  'darkPrimaryFill',\n  'darkDefaultFill',\n  'darkPrimaryLine',\n  'darkDefaultLine',\n  'darkText',\n  'darkPrimaryApplied',\n  'darkFillDisabled',\n  'darkLineDisabled',\n  'darkTextDisabled',\n}\n\ntype StyleForColor<Color extends TButtonColor> = Color extends 'primary' ? 'filled' | 'outlined' : 'filled' | 'default' | 'text' | 'applied' | 'outlined';\n\nexport interface IButtonProps<Color extends TButtonColor> {\n  on: TButtonOn;\n  color: Color;\n  style: StyleForColor<Color>;\n  size: TButtonSize;\n  activated?: boolean;\n  startIcon?: boolean;\n  endIcon?: boolean;\n  isLoading?: boolean;\n  width?: number | string;\n  buttonStyle?: CSSProperties;\n  children: ReactNode | ReactNode[];\n}\n","import styled from 'styled-components';\nimport { BUTTON_TYPE, TButtonSize } from './Button.type';\nimport { TColor } from '@shared/settings/color.type';\nimport { getColor } from '@shared/util/util';\n\n// 버튼 배경 색\nconst BUTTON_BACKGROUND: { [key in BUTTON_TYPE]: TColor } = {\n  [BUTTON_TYPE.lightPrimaryFill]: 'color/violet/600',\n  [BUTTON_TYPE.lightDefaultFill]: 'color/gray/800',\n  [BUTTON_TYPE.lightPrimaryLine]: 'color/white',\n  [BUTTON_TYPE.lightDefaultLine]: 'color/white',\n  [BUTTON_TYPE.lightText]: 'color/white',\n  [BUTTON_TYPE.lightPrimaryApplied]: 'color/violet/400',\n  [BUTTON_TYPE.lightFillDisabled]: 'color/gray/200',\n  [BUTTON_TYPE.lightLineDisabled]: 'color/white',\n  [BUTTON_TYPE.lightTextDisabled]: 'color/white',\n  [BUTTON_TYPE.darkPrimaryFill]: 'color/violet/600',\n  [BUTTON_TYPE.darkDefaultFill]: 'color/gray/200',\n  [BUTTON_TYPE.darkPrimaryLine]: 'color/violet/400',\n  [BUTTON_TYPE.darkDefaultLine]: 'color/white',\n  [BUTTON_TYPE.darkText]: 'color/white',\n  [BUTTON_TYPE.darkPrimaryApplied]: 'color/violet/400',\n  [BUTTON_TYPE.darkFillDisabled]: 'color/gray/400',\n  [BUTTON_TYPE.darkLineDisabled]: 'color/white',\n  [BUTTON_TYPE.darkTextDisabled]: 'color/white',\n};\n\n// 버튼 테두리 색\nconst BUTTON_BORDER_COLOR: { [key in BUTTON_TYPE]: TColor | null } = {\n  [BUTTON_TYPE.lightPrimaryFill]: null,\n  [BUTTON_TYPE.lightDefaultFill]: null,\n  [BUTTON_TYPE.lightPrimaryLine]: 'color/violet/600',\n  [BUTTON_TYPE.lightDefaultLine]: 'color/dim/400',\n  [BUTTON_TYPE.lightText]: null,\n  [BUTTON_TYPE.lightPrimaryApplied]: 'color/violet/400',\n  [BUTTON_TYPE.lightFillDisabled]: null,\n  [BUTTON_TYPE.lightLineDisabled]: 'color/gray/200',\n  [BUTTON_TYPE.lightTextDisabled]: null,\n  [BUTTON_TYPE.darkPrimaryFill]: null,\n  [BUTTON_TYPE.darkDefaultFill]: null,\n  [BUTTON_TYPE.darkPrimaryLine]: 'color/violet/400',\n  [BUTTON_TYPE.darkDefaultLine]: 'color/dim/500',\n  [BUTTON_TYPE.darkText]: null,\n  [BUTTON_TYPE.darkPrimaryApplied]: 'color/violet/400',\n  [BUTTON_TYPE.darkFillDisabled]: null,\n  [BUTTON_TYPE.darkLineDisabled]: 'color/gray/600',\n  [BUTTON_TYPE.darkTextDisabled]: null,\n};\n\nexport const ButtonContainer = styled.button<{ buttonType: BUTTON_TYPE; size: TButtonSize; width: number | string }>(\n  (props: { buttonType: BUTTON_TYPE; size: TButtonSize; width: number | string }) => {\n    const backgroundColor = (() => {\n      let color = getColor(BUTTON_BACKGROUND[props.buttonType]);\n      if (props.buttonType === BUTTON_TYPE.lightDefaultLine) color = `${color}80`;\n      if (props.buttonType === BUTTON_TYPE.lightPrimaryApplied) color = `${color}0A`;\n      if (props.buttonType === BUTTON_TYPE.darkDefaultLine) color = `${color}73`;\n      if (props.buttonType === BUTTON_TYPE.darkPrimaryApplied) color = `${color}3D`;\n      return color;\n    })();\n\n    const borderColor = (() => {\n      if (!BUTTON_BORDER_COLOR[props.buttonType]) return null;\n      let color = getColor(BUTTON_BORDER_COLOR[props.buttonType]);\n      if (props.buttonType === BUTTON_TYPE.lightDefaultLine) color = `${color}80`;\n      if (props.buttonType === BUTTON_TYPE.darkDefaultLine) color = `${color}73`;\n      return color;\n    })();\n\n    const paddingSize = (() => {\n      if (props.size === 'L' && [BUTTON_TYPE.lightText, BUTTON_TYPE.darkText].includes(props.buttonType)) return '12px 11px';\n      if (props.size === 'M' && [BUTTON_TYPE.lightText, BUTTON_TYPE.darkText].includes(props.buttonType)) return '10px 11px';\n      if (props.size === 'S' && [BUTTON_TYPE.lightText, BUTTON_TYPE.darkText].includes(props.buttonType)) return '8px 10px';\n      if (props.size === 'L') return '12px 22px';\n      if (props.size === 'M') return '10px 22px';\n      if (props.size === 'S') return '8px 16px';\n    })();\n\n    return {\n      display: 'flex',\n      borderRadius: '8px',\n      padding: paddingSize,\n      backgroundColor: backgroundColor,\n      ...(props.width && { width: !Number.isNaN(Number(props.width)) ? `${props.width}px` : props.width }),\n      ...(borderColor ? { border: `1px solid ${borderColor};` } : { border: 'none' }),\n    };\n  },\n);\n","import React from 'react';\nimport { ButtonContainer } from './Button.styles';\nimport Letter from '@components/Letter/Letter';\nimport { TLetterVariant } from '@components/Letter/Letter.types';\nimport { TColor } from '@shared/settings/color.type';\nimport { BUTTON_TYPE, IButtonProps, TButtonColor } from './Button.type';\n\n/* \n  [todo]: starticon, endicon, isLoading 의 경우 아이콘이 모두 정의되면 진행할 예정 \n  icon의 경우 icon이름을 string으로 지정해주면 그에 맞는 아이콘을 불러올 수 있도록 구현할 예정 (크기는 size 마다 고정)\n*/\n/**\n * props를 설정하지 않을 경우 기본적으로 primary, filled, m 스타일로 적용됩니다.\n */\nconst Button = <Color extends TButtonColor>({\n  on,\n  color,\n  style,\n  size,\n  activated = true,\n  startIcon = false,\n  endIcon = false,\n  isLoading = false,\n  width = null,\n  buttonStyle,\n  children,\n}: IButtonProps<Color>) => {\n  // 피그마 속성으로 타입 재정의\n  const buttonType: BUTTON_TYPE = (() => {\n    let type: BUTTON_TYPE;\n\n    if (on === 'light' && activated) {\n      if (color === 'primary' && style === 'filled') type = BUTTON_TYPE.lightPrimaryFill;\n      if (color === 'default' && style === 'filled') type = BUTTON_TYPE.lightDefaultFill;\n      if (color === 'primary' && style === 'outlined') type = BUTTON_TYPE.lightPrimaryLine;\n      if (color === 'default' && style === 'default') type = BUTTON_TYPE.lightDefaultLine;\n      if (color === 'default' && style === 'text') type = BUTTON_TYPE.lightText;\n      if (color === 'default' && style === 'applied') type = BUTTON_TYPE.lightPrimaryApplied;\n    }\n    if (on === 'light' && !activated) {\n      if (color === 'primary' && style === 'filled') type = BUTTON_TYPE.lightFillDisabled;\n      if (color === 'default' && style === 'outlined') type = BUTTON_TYPE.lightLineDisabled;\n      if (color === 'default' && style === 'text') type = BUTTON_TYPE.lightTextDisabled;\n    }\n\n    if (on === 'dark' && activated) {\n      if (color === 'primary' && style === 'filled') type = BUTTON_TYPE.darkPrimaryFill;\n      if (color === 'default' && style === 'filled') type = BUTTON_TYPE.darkDefaultFill;\n      if (color === 'primary' && style === 'outlined') type = BUTTON_TYPE.darkPrimaryLine;\n      if (color === 'default' && style === 'default') type = BUTTON_TYPE.darkDefaultLine;\n      if (color === 'default' && style === 'text') type = BUTTON_TYPE.darkText;\n      if (color === 'default' && style === 'applied') type = BUTTON_TYPE.darkPrimaryApplied;\n    }\n    if (on === 'dark' && !activated) {\n      if (color === 'primary' && style === 'filled') type = BUTTON_TYPE.darkFillDisabled;\n      if (color === 'default' && style === 'outlined') type = BUTTON_TYPE.darkLineDisabled;\n      if (color === 'default' && style === 'text') type = BUTTON_TYPE.darkTextDisabled;\n    }\n\n    return type || BUTTON_TYPE.lightPrimaryFill;\n  })();\n\n  // 버튼 내부에 들어가는 텍스트 스타일\n  const buttonLetterVariant: TLetterVariant = size === 'L' ? 'letter/en, ko/medium/bold' : 'letter/en, ko/small/bold';\n  const buttonLetterColor: TColor = (() => {\n    let letterColor: TColor = 'color/white';\n\n    if ([BUTTON_TYPE.lightPrimaryLine].includes(buttonType)) letterColor = 'color/violet/600';\n    if ([BUTTON_TYPE.lightDefaultLine, BUTTON_TYPE.lightText, BUTTON_TYPE.lightPrimaryApplied].includes(buttonType)) letterColor = 'color/gray/800';\n    if ([BUTTON_TYPE.lightFillDisabled].includes(buttonType)) letterColor = 'color/gray/400';\n    if ([BUTTON_TYPE.lightLineDisabled, BUTTON_TYPE.lightTextDisabled].includes(buttonType)) letterColor = 'color/gray/200';\n\n    if ([BUTTON_TYPE.darkDefaultFill].includes(buttonType)) letterColor = 'color/black';\n    if ([BUTTON_TYPE.darkPrimaryLine, BUTTON_TYPE.darkPrimaryApplied].includes(buttonType)) letterColor = 'color/violet/400';\n    if ([BUTTON_TYPE.darkDefaultLine, BUTTON_TYPE.darkText].includes(buttonType)) letterColor = 'color/gray/100';\n    if ([BUTTON_TYPE.darkFillDisabled, BUTTON_TYPE.darkLineDisabled, BUTTON_TYPE.darkTextDisabled].includes(buttonType)) letterColor = 'color/gray/600';\n\n    return letterColor;\n  })();\n\n  return (\n    <ButtonContainer buttonType={buttonType} size={size} width={width} style={buttonStyle}>\n      <Letter variant={buttonLetterVariant} color={buttonLetterColor}>\n        {children}\n      </Letter>\n    </ButtonContainer>\n  );\n};\n\nexport default Button;\n"],"names":["BUTTON_TYPE","BUTTON_TYPE2","BUTTON_BACKGROUND","BUTTON_BORDER_COLOR","ButtonContainer","styled","props","backgroundColor","color","getColor","borderColor","Button","on","style","size","activated","startIcon","endIcon","isLoading","width","buttonStyle","children","buttonType","type","buttonLetterVariant","buttonLetterColor","letterColor","jsx","Letter"],"mappings":"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"}