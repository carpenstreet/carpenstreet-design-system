{"version":3,"file":"Letter-f6ac5369.js","sources":["../../src/shared/util/util.ts","../../src/components/Letter/Letter.tsx"],"sourcesContent":["import { TColor } from '@shared/settings/color.type';\nimport colorObj from '@shared/settings/Color.ts';\nimport { TOpactiy } from './util.type';\n\nexport const getColor = (color: TColor): string => {\n  const properties = color.replace('color/', '').split('/');\n  let value = colorObj;\n  for (const property of properties) value = value[property];\n  return value.toString();\n};\n\nexport const getHexOpacity = (hex: string, opacity: TOpactiy) => {\n  const hexOpactiyObj = {\n    [100]: 'FF',\n    [95]: 'F2',\n    [90]: 'E6',\n    [85]: 'D9',\n    [80]: 'CC',\n    [75]: 'BF',\n    [70]: 'B3',\n    [65]: 'A6',\n    [60]: '99',\n    [55]: '8C',\n    [50]: '80',\n    [45]: '73',\n    [40]: '66',\n  };\n\n  return `${hex}${hexOpactiyObj[opacity]}`;\n};\n","import React from 'react';\nimport { ILetterProps } from './Letter.types';\nimport { getColor } from '@shared/util/util';\n\nconst sizeObj = {\n  ['maximum']: {\n    fontSize: '40px',\n    lineHeight: '56px',\n  },\n  ['giant']: {\n    fontSize: '32px',\n    lineHeight: '48px',\n  },\n  ['large']: {\n    fontSize: '24px',\n    lineHeight: '36px',\n  },\n  ['medium']: {\n    fontSize: '16px',\n    lineHeight: '24px',\n  },\n  ['small']: {\n    fontSize: '14px',\n    lineHeight: '20px',\n  },\n  ['tiny']: {\n    fontSize: '12px',\n    lineHeight: '16px',\n  },\n  ['minimal']: {\n    fontSize: '10px',\n    lineHeight: '14px',\n  },\n};\n\nconst weightObj = {\n  ['black']: {\n    fontWeight: 800,\n  },\n  ['bold']: {\n    fontWeight: 600,\n  },\n  ['regular']: {\n    fontWeight: 400,\n  },\n};\n\n/**\n * variant를 설정하지 않을 경우 기본적으로 Letter/en, ko/medium(medium/regular)이 적용됩니다.\n * @param variant 피그마에 있는 Ag 속성을 그대로 사용합니다.\n * @constructor\n */\nconst Letter = ({ variant = 'letter/en, ko/medium', color = 'color/text/primary', className, style={}, children, ...rest }: ILetterProps) => {\n  const replaceString = variant.replace('Letter', 'letter').replace('/regular', '')\n    .replace('letter/en, ko/', '').replace('letter/ja/', '');\n  const variants = replaceString.split('/').slice(-2);\n  const size = variants[0];\n  const weight = variants[1] || 'regular';\n\n  const styleObj = {\n    ...sizeObj[size],\n    ...weightObj[weight],\n    color: getColor(color),\n    ...style,\n  };\n\n  return (\n    <div className={className} style={styleObj} {...rest}>\n      {children}\n    </div>\n  );\n};\n\nexport default Letter;\n"],"names":["getColor","color","properties","value","colorObj","property","sizeObj","weightObj","Letter","variant","className","style","children","rest","variants","size","weight","styleObj","jsx"],"mappings":"sFAIa,MAAAA,EAAYC,GAA0B,CACjD,MAAMC,EAAaD,EAAM,QAAQ,SAAU,EAAE,EAAE,MAAM,GAAG,EACxD,IAAIE,EAAQC,EACZ,UAAWC,KAAYH,EAAYC,EAAQA,EAAME,CAAQ,EACzD,OAAOF,EAAM,UACf,ECLAG,EAAA,CAAgB,QAAA,CACD,SAAA,OACD,WAAA,MACE,EACd,MAAA,CACW,SAAA,OACC,WAAA,MACE,EACd,MAAA,CACW,SAAA,OACC,WAAA,MACE,EACd,OAAA,CACY,SAAA,OACA,WAAA,MACE,EACd,MAAA,CACW,SAAA,OACC,WAAA,MACE,EACd,KAAA,CACU,SAAA,OACE,WAAA,MACE,EACd,QAAA,CACa,SAAA,OACD,WAAA,MACE,CAEhB,EAEAC,EAAA,CAAkB,MAAA,CACL,WAAA,GACG,EACd,KAAA,CACU,WAAA,GACI,EACd,QAAA,CACa,WAAA,GACC,CAEhB,EAOAC,EAAA,CAAA,CAAA,QAAAC,EAAA,uBAAA,MAAAR,EAAA,qBAAA,UAAAS,EAAA,MAAAC,EAAA,CAAA,EAAA,SAAAC,EAAA,GAAAC,CAAA,IAAA,CAGE,MAAAC,EAFAL,EAAA,QAAA,SAAA,QAAA,EAAA,QAAA,WAAA,EAAA,EAAA,QAAA,iBAAA,EAAA,EAAA,QAAA,aAAA,EAAA,EAEA,MAAA,GAAA,EAAA,MAAA,EAAA,EACAM,EAAAD,EAAA,CAAA,EACAE,EAAAF,EAAA,CAAA,GAAA,UAEAG,EAAA,CAAiB,GAAAX,EAAAS,CAAA,EACA,GAAAR,EAAAS,CAAA,EACI,MAAAhB,EAAAC,CAAA,EACE,GAAAU,CAClB,EAGL,OAAAO,EAAA,MAAA,CAAA,UAAAR,EAAA,MAAAO,EAAA,GAAAJ,EAAA,SAAAD,CAAA,CAAA,CAKF"}